{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import type { Plugin } from '@elizaos/core';\nimport {\n  type Action,\n  type Content,\n  type GenerateTextParams,\n  type HandlerCallback,\n  type IAgentRuntime,\n  type Memory,\n  ModelType,\n  type Provider,\n  type ProviderResult,\n  Service,\n  type State,\n  logger,\n} from '@elizaos/core';\nimport { z } from 'zod';\n\n/**\n * Defines the configuration schema for a plugin, including the validation rules for the plugin name.\n *\n * @type {import('zod').ZodObject<{ EXAMPLE_PLUGIN_VARIABLE: import('zod').ZodString }>}\n */\nconst configSchema = z.object({\n  EXAMPLE_PLUGIN_VARIABLE: z\n    .string()\n    .min(1, 'Example plugin variable is not provided')\n    .optional()\n    .transform((val) => {\n      if (!val) {\n        logger.warn('Example plugin variable is not provided (this is expected)');\n      }\n      return val;\n    }),\n});\n\n/**\n * Example HelloWorld action\n * This demonstrates the simplest possible action structure\n */\n/**\n * Action representing a hello world message.\n * @typedef {Object} Action\n * @property {string} name - The name of the action.\n * @property {string[]} similes - An array of related actions.\n * @property {string} description - A brief description of the action.\n * @property {Function} validate - Asynchronous function to validate the action.\n * @property {Function} handler - Asynchronous function to handle the action and generate a response.\n * @property {Object[]} examples - An array of example inputs and expected outputs for the action.\n */\nconst helloWorldAction: Action = {\n  name: 'HELLO_WORLD',\n  similes: ['GREET', 'SAY_HELLO'],\n  description: 'Responds with a simple hello world message',\n\n  validate: async (_runtime: IAgentRuntime, _message: Memory, _state: State): Promise<boolean> => {\n    // Always valid\n    return true;\n  },\n\n  handler: async (\n    _runtime: IAgentRuntime,\n    message: Memory,\n    _state: State,\n    _options: any,\n    callback: HandlerCallback,\n    _responses: Memory[]\n  ) => {\n    try {\n      logger.info('Handling HELLO_WORLD action');\n\n      // Simple response content\n      const responseContent: Content = {\n        text: 'hello world!',\n        actions: ['HELLO_WORLD'],\n        source: message.content.source,\n      };\n\n      // Call back with the hello world message\n      await callback(responseContent);\n\n      return responseContent;\n    } catch (error) {\n      logger.error('Error in HELLO_WORLD action:', error);\n      throw error;\n    }\n  },\n\n  examples: [\n    [\n      {\n        name: '{{name1}}',\n        content: {\n          text: 'Can you say hello?',\n        },\n      },\n      {\n        name: '{{name2}}',\n        content: {\n          text: 'hello world!',\n          actions: ['HELLO_WORLD'],\n        },\n      },\n    ],\n  ],\n};\n\n/**\n * Example Hello World Provider\n * This demonstrates the simplest possible provider implementation\n */\nconst helloWorldProvider: Provider = {\n  name: 'HELLO_WORLD_PROVIDER',\n  description: 'A simple example provider',\n\n  get: async (\n    _runtime: IAgentRuntime,\n    _message: Memory,\n    _state: State\n  ): Promise<ProviderResult> => {\n    return {\n      text: 'I am a provider',\n      values: {},\n      data: {},\n    };\n  },\n};\n\nexport class StarterService extends Service {\n  static serviceType = 'starter';\n  capabilityDescription =\n    'This is a starter service which is attached to the agent through the starter plugin.';\n  constructor(protected runtime: IAgentRuntime) {\n    super(runtime);\n  }\n\n  static async start(runtime: IAgentRuntime) {\n    logger.info(`*** Starting starter service - MODIFIED: ${new Date().toISOString()} ***`);\n    const service = new StarterService(runtime);\n    return service;\n  }\n\n  static async stop(runtime: IAgentRuntime) {\n    logger.info('*** TESTING DEV MODE - STOP MESSAGE CHANGED! ***');\n    // get the service from the runtime\n    const service = runtime.getService(StarterService.serviceType);\n    if (!service) {\n      throw new Error('Starter service not found');\n    }\n    service.stop();\n  }\n\n  async stop() {\n    logger.info('*** THIRD CHANGE - TESTING FILE WATCHING! ***');\n  }\n}\n\nexport const starterPlugin: Plugin = {\n  name: 'plugin-starter',\n  description: 'Plugin starter for elizaOS',\n  config: {\n    EXAMPLE_PLUGIN_VARIABLE: process.env.EXAMPLE_PLUGIN_VARIABLE,\n  },\n  async init(config: Record<string, string>) {\n    logger.info('*** TESTING DEV MODE - PLUGIN MODIFIED AND RELOADED! ***');\n    try {\n      const validatedConfig = await configSchema.parseAsync(config);\n\n      // Set all environment variables at once\n      for (const [key, value] of Object.entries(validatedConfig)) {\n        if (value) process.env[key] = value;\n      }\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        throw new Error(\n          `Invalid plugin configuration: ${error.errors.map((e) => e.message).join(', ')}`\n        );\n      }\n      throw error;\n    }\n  },\n  models: {\n    [ModelType.TEXT_SMALL]: async (\n      _runtime,\n      { prompt, stopSequences = [] }: GenerateTextParams\n    ) => {\n      return 'Never gonna give you up, never gonna let you down, never gonna run around and desert you...';\n    },\n    [ModelType.TEXT_LARGE]: async (\n      _runtime,\n      {\n        prompt,\n        stopSequences = [],\n        maxTokens = 8192,\n        temperature = 0.7,\n        frequencyPenalty = 0.7,\n        presencePenalty = 0.7,\n      }: GenerateTextParams\n    ) => {\n      return 'Never gonna make you cry, never gonna say goodbye, never gonna tell a lie and hurt you...';\n    },\n  },\n  tests: [\n    {\n      name: 'plugin_starter_test_suite',\n      tests: [\n        {\n          name: 'example_test',\n          fn: async (runtime) => {\n            logger.debug('example_test run by ', runtime.character.name);\n            // Add a proper assertion that will pass\n            if (runtime.character.name !== 'Eliza') {\n              throw new Error(\n                `Expected character name to be \"Eliza\" but got \"${runtime.character.name}\"`\n              );\n            }\n            // Verify the plugin is loaded properly\n            const service = runtime.getService('starter');\n            if (!service) {\n              throw new Error('Starter service not found');\n            }\n            // Don't return anything to match the void return type\n          },\n        },\n        {\n          name: 'should_have_hello_world_action',\n          fn: async (runtime) => {\n            // Check if the hello world action is registered\n            // Look for the action in our plugin's actions\n            // The actual action name in this plugin is \"helloWorld\", not \"hello\"\n            const actionExists = starterPlugin.actions.some((a) => a.name === 'HELLO_WORLD');\n            if (!actionExists) {\n              throw new Error('Hello world action not found in plugin');\n            }\n          },\n        },\n      ],\n    },\n  ],\n  routes: [\n    {\n      path: '/helloworld',\n      type: 'GET',\n      handler: async (_req: any, res: any) => {\n        // send a response\n        res.json({\n          message: 'Hello World!',\n        });\n      },\n    },\n  ],\n  events: {\n    MESSAGE_RECEIVED: [\n      async (params) => {\n        logger.debug('MESSAGE_RECEIVED event received');\n        // print the keys\n        logger.debug(Object.keys(params));\n      },\n    ],\n    VOICE_MESSAGE_RECEIVED: [\n      async (params) => {\n        logger.debug('VOICE_MESSAGE_RECEIVED event received');\n        // print the keys\n        logger.debug(Object.keys(params));\n      },\n    ],\n    WORLD_CONNECTED: [\n      async (params) => {\n        logger.debug('WORLD_CONNECTED event received');\n        // print the keys\n        logger.debug(Object.keys(params));\n      },\n    ],\n    WORLD_JOINED: [\n      async (params) => {\n        logger.debug('WORLD_JOINED event received');\n        // print the keys\n        logger.debug(Object.keys(params));\n      },\n    ],\n  },\n  services: [StarterService],\n  actions: [helloWorldAction],\n  providers: [helloWorldProvider],\n};\n\n// Add debugging info to help understand why tests aren't running\n{\n  const debugPlugin = () => {\n    // Add this temporary code to print info about the tests\n    // Will be removed after debugging\n    logger.debug('DEBUG: PLUGIN STRUCTURE:');\n    logger.debug('Plugin name:', starterPlugin.name);\n    logger.debug('Tests array exists:', !!starterPlugin.tests);\n    logger.debug('Tests array length:', starterPlugin.tests?.length);\n    if (starterPlugin.tests && starterPlugin.tests.length > 0) {\n      logger.debug('First test suite name:', starterPlugin.tests[0].name);\n      logger.debug('First test suite has tests array:', !!starterPlugin.tests[0].tests);\n      logger.debug('First test suite tests length:', starterPlugin.tests[0].tests?.length);\n      if (starterPlugin.tests[0].tests && starterPlugin.tests[0].tests.length > 0) {\n        logger.debug('First test name:', starterPlugin.tests[0].tests[0].name);\n        logger.debug('First test has fn:', !!starterPlugin.tests[0].tests[0].fn);\n      }\n    }\n  };\n  // Call function but don't display in IDE completion\n  debugPlugin();\n}\n\nexport default starterPlugin;\n"],"mappings":"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","names":[]}